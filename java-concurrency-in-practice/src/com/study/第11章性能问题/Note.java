package com.study.第11章性能问题;

public class Note {
    /**
     *
     * 一.性能与可伸缩性
     *      1.什么是高性能
     *          通俗：有效地利用现有处理资源
     *          本质：让CPU在有效作业中保持忙碌
     *      2.性能的指标
     *          1>“多快”指标：服务时间，延迟时间，吞吐率，效率
     *          2>“能做多少”指标：生产量，吞吐量
     *      3.什么是可伸缩性
     *          当增加计算机资源时，程序的吞吐量或者处理能力能相应的增加
     *      4.性能与可伸缩性的关系
     *          二者更多时候是矛盾的，为了可伸缩性，不可避免要损失一点性能，但是在软件开发中，可
     *        伸缩性比性能更重要
     *        （个人认为因为性能不够，伸缩性好的程序可以加资源来达到提高性能的目的，同时可维护
     *        性更高）
     * 二.评估各种性能权衡因素
     *      1.本节核心：
     *          避免不成熟的优化，先让程序正确运行，然后在基于需求或一系列数据，设计优化方案
     *      2.优化是有前提和场景的!
     *          1>前提：要进行优化，就必须现有明确的需求，优化永无止境，我们应该找最适合的方案，而不是
     *        最快的方案，这就是为什么先把程序做出来，在根据实际情况，收集数据，分析数据，明确需求，
     *        最后在进行方案设计
     *          2>场景：高负载下快？低负载下快？大数据?小数据？环境要求？
     *      3.优化是有利有弊的！
     *          1>越聪明的代码，越快的算法，越复杂，越晦涩难懂，越难维护
     *          2>优化有时候是以破坏对象设计原则为代价
     *          3>有时候优化会带来更高的错误风险
     *        综上所述: 如果你无法找出优化方案在其中的代价和风险，就代表你还没有彻底思考和分析清楚，
     *        你还没有做好优化的准备
     *      4.优化需要验证后再进行一次权衡！
     *          1>根据目标需求进行优化后，必须进行测试验证，看是否达到目标
     *          2>根据与目标的差异，我们需要权衡优化所带来的益处是否大于优化方案所付出的代价，考虑
     *        是否最终实装方案
     *      5.Amdahl定律
     *          可优化的比率取决于一个软件的串行运行时间比率
     * 三.线程引入的开销
     *
     */
}
